<?php

namespace Tests\Feature;

use App\Http\Livewire\CreateProject;
use App\Models\Project;
use App\Models\Task;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Arr;
use Facades\Tests\Setup\ProjectFactory;
use Illuminate\Support\Str;
use Tests\TestCase;

class ProjectTest extends TestCase
{
    use WithFaker;
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }


    public function test_guest_user_can_not_manage_project()
    {
        $data = Project::factory()->raw();
        $this->post(route('projects.store'), $data)
            ->assertRedirect(route('login'));
        $this->get(route('projects.index'))
            ->assertRedirect(route('login'));
        $project = Project::factory()->create();
        $this->get(route('projects.show', $project->id))
            ->assertRedirect(route('login'));
    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function test_user_can_create_a_project()
    {
        $this->withoutExceptionHandling();
        $data = [
            'title' => $this->faker->sentence,
            'description' => $this->faker->paragraph,
        ];
        $this->signIn(User::factory()->create());
        $this->get(route('projects.create'))->assertStatus(200);
        $this->post('projects', $data)
            ->assertRedirect(route('projects.index'));

        $this->assertNull(Project::first()->activities->last()->changes_log);

        $this->assertDatabaseHas('projects', $data);


    }

    public function test_project_required_a_title()
    {
        $data = Project::factory()->raw(['title' => null]);

        $this->signIn(User::factory()->create());

        $this->post('projects', $data)
            ->assertSessionHasErrors(['title']);
    }

    public function test_a_user_can_only_view_his_own_project()
    {
        $user = $this->signIn();

        $project = ProjectFactory::ownedBy($user)->create();

        $this->get(route('projects.show', $project->id))
            ->assertSee(Arr::only($project->getAttributes(), ['title', 'description']));
    }

    public function test_authenticate_user_can_not_view_project_of_other()
    {
        $project = ProjectFactory::create();

        $this->signIn();
        $this->get(route('projects.show', $project->id))
            ->assertStatus(403);
    }

    public function test_project_belong_to_user()
    {
        $project = Project::factory()->create();

        $this->assertInstanceOf(User::class, $project->user);
    }

    public function test_user_can_update_project()
    {
        $user = $this->signIn();
        $project = ProjectFactory::ownedBy($user)->create(['notes' => 'new', 'title' => 'new', 'description' => 'new']);

        $this->patch(route('projects.update', $project->id), ['notes' => 'update']);
        $this->assertDatabaseHas('projects', [
            'notes' => 'update',
        ]);
        $this->assertEquals($project->activities->last()->changes_log, [
            'before' => ['notes' => 'new'],
            'after' => ['notes' => 'update']
        ]);
    }

    public function test_user_can_update_project_note()
    {
        $user = $this->signIn();
        $project = ProjectFactory::ownedBy($user)->create(['notes' => 'new']);

        $this->patch(route('projects.update', $project->id), ['notes' => 'update']);
        $this->assertDatabaseHas('projects', [
            'notes' => 'update',
        ]);
    }

    public function test_user_can_delete_project()
    {
        $user = $this->signIn();
        $project = ProjectFactory::ownedBy($user)->create();
        $this->assertDatabaseHas('projects', $project->getAttributes());
        $this->delete(route('projects.destroy', $project->id));

        $this->assertDatabaseMissing('projects', $project->getAttributes());
    }

    public function test_guest_user_can_not_delete_project()
    {
        $project = ProjectFactory::create();
        $this->assertDatabaseHas('projects', $project->getAttributes());
        $this->delete(route('projects.destroy', $project->id))->assertRedirect(route('login'));

        $this->assertDatabaseHas('projects', $project->getAttributes());
    }

    public function test_auth_user_can_not_delete_other_project()
    {
        $project = ProjectFactory::create();
        $this->assertDatabaseHas('projects', $project->getAttributes());
        $this->signIn();
        $this->delete(route('projects.destroy', $project->id))->assertStatus(403);

        $this->assertDatabaseHas('projects', $project->getAttributes());
    }

    public function test_user_can_see_all_project_they_have_been_invited_to_on_their_dashboard()
    {
        $user = $this->signIn();
        ProjectFactory::ownedBy($user)->create();
        $project = tap(ProjectFactory::create())->invite($user);
        self::assertEquals(2, $user->accessibleProjectsQuery()->count());
        $this->get(route('projects.index'))->assertSee(Str::limit($project->title, 30));
    }

    public function test_create_project_with_modal()
    {
        $this->signIn();
        $this->assertDatabaseMissing('projects', ['title' => 'test']);
        self::assertCount(0, Project::all());
        \Livewire::test(CreateProject::class)
            ->set('title', 'test')
            ->set('description', 'test')
            ->set('tasks', [['body' => '']])
            ->call('createProject');


        $this->assertDatabaseHas('projects', ['title' => 'test']);
        self::assertCount(1, Project::all());
    }

    public function test_create_project_along_with_task_with_modal()
    {
        $this->signIn();
        $this->assertDatabaseMissing('tasks', ['body' => 'test']);
        self::assertCount(0, Task::all());
        \Livewire::test(CreateProject::class)
            ->set('title', 'test')
            ->set('description', 'test')
            ->set('tasks', [['body' => 'test']])
            ->call('createProject');

        $this->assertDatabaseHas('tasks', ['body' => 'test', 'project_id' => 1]);
        self::assertCount(1, Task::all());
    }


    public function test_create_project_require_title_desc__with_modal()
    {
        $this->signIn();
        \Livewire::test(CreateProject::class)
            ->set('title', '')
            ->set('description', '')
            ->call('createProject')
            ->assertHasErrors('title')
            ->assertHasErrors('description');


        $this->assertDatabaseMissing('projects', ['title' => 'test']);
        self::assertCount(0, Project::all());
    }

}
