<?php

namespace Tests\Feature;

use App\Models\Project;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Arr;
use Tests\TestCase;

class ProjectTest extends TestCase
{
    use WithFaker;
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }


    public function test_guest_user_can_not_manage_project()
    {
        $data = Project::factory()->raw();
        $this->post(route('projects.store'), $data)
            ->assertRedirect(route('login'));
        $this->get(route('projects.index'))
            ->assertRedirect(route('login'));
        $project = Project::factory()->create();
        $this->get(route('projects.show', $project->id))
            ->assertRedirect(route('login'));
    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function test_user_can_create_a_project()
    {
        $this->withoutExceptionHandling();
        $data = [
            'title' => $this->faker->sentence,
            'description' => $this->faker->paragraph,
        ];
        $this->be(User::factory()->create());
        $this->get(route('projects.create'))->assertStatus(200);
        $this->post('projects', $data)
            ->assertRedirect(route('projects.index'));

        $this->assertDatabaseHas('projects', $data);


    }

    public function test_project_required_a_title()
    {
        $data = Project::factory()->raw(['title' => null]);
        $this->signIn(User::factory()->create())->post('projects', $data)
            ->assertSessionHasErrors(['title']);
    }

    public function test_a_user_can_only_view_his_own_project()
    {
        $user = User::factory()->create();
        $project = Project::factory()->create([
            'user_id' => $user->id
        ]);

        $this->signIn($user)->get(route('projects.show', $project->id))
            ->assertSee(Arr::only($project->getAttributes(), ['title', 'description']));
    }

    public function test_authenticate_user_can_not_view_project_of_other()
    {
        $user = User::factory()->create();
        $project = Project::factory()->create([
            'user_id' => $user->id
        ]);

        $this->be(User::factory()->create())
            ->get(route('projects.show', $project->id))
            ->assertStatus(403);
    }

    public function test_project_belong_to_user()
    {
        $project = Project::factory()->create();

        $this->assertInstanceOf(User::class, $project->user);
    }
}
